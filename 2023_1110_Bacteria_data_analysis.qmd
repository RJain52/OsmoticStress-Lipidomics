---
title: "Bacteria Analysis"
author: "Raghav Jain"
format: html
editor: visual
---

# Load packages and data

Data is in pmol/million cells

```{r, warning=FALSE, message=FALSE}
# Required packages
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(Cairo)){install.packages("Cairo")}
if(!require(ggsci)){install.packages("ggsci")}
if(!require(scales)){install.packages("scales")}
if(!require(ggpubr)){install.packages("ggpubr")}
if(!require(rstatix)){install.packages("rstatix")}
if(!require(ggbreak)){install.packages("ggbreak")}
if(!require(factoextra)){install.packages("factoextra")}
if(!require(VennDiagram)){install.packages("VennDiagram")}
if(!require(rowr)){install.packages("rowr")}

# Load data
lipid_data <- read_csv("lipidomics_data.csv")

# Palettes used in the analysis
mypal_bar <- pal_igv('default', alpha = 1)(9)
mypal_new <- c("#00AFBB",  "#FC4E07", "green4")
```

## PCA

```{r}
mdat <- lipid_data

# Replace lipids not detected in certain samples with 0
mdat[is.na(mdat)] <- 0

# Perform PCA analysis
res.pca <- prcomp(mdat[,-c(1,2)],
             center = TRUE,
            scale. = TRUE)

# Information in res.pca
attributes(res.pca)

# Loadings for all lipids
print(res.pca)

# Scree plot
fviz_eig(res.pca)

# Plot PC1 and PC2
p0 <- fviz_pca_ind(res.pca,
                   col.ind = mdat$Condition,
                   palette = c("#00AFBB",  "#FC4E07", "green4"),
                   addEllipses = TRUE, 
                   ellipse.type = "confidence",
                   legend.title = "Condition",
                   repel = TRUE
                   ) +
  ggtitle("Principal Component Analysis") +
  xlab("PC 1 (47.7%)") +
  ylab("PC 2 (18.4%)") +
  theme_bw(base_size = 14,
           base_family = "sans",
           base_line_size = 1) +
  theme(axis.text = element_text(size = 12),
        axis.line = element_line(linetype = 0),
        legend.position = "bottom"
        )

# Visualize PCA plot
p0

# Save PCA plot
ggsave(filename="output/PCA.pdf", 
       plot = p0, 
       device = "pdf",
       width = 14, height = 12,
       units = "cm",
       dpi = 600)

rm(p0, mdat, res.pca)
```

## Class sums

Sum lipid species belonging to the lipid classes present in the dataset.

```{r}
# Copy lipid data to new data frame
mydata <- lipid_data

# Calculate lipid class sums and create variables for them
mydata$`Total CL` <- rowSums(mydata[,grep('CL', colnames(mydata))], na.rm = T)
mydata$`Total DG` <- rowSums(mydata[,grep('\\bDG\\b', colnames(mydata))], na.rm = T)
mydata$`Total FFA` <- rowSums(mydata[,grep('FA', colnames(mydata))], na.rm = T)  
mydata$`Total LPC` <- rowSums(mydata[,grep('LPC', colnames(mydata))], na.rm = T)  
mydata$`Total LPE` <- rowSums(mydata[,grep('LPE', colnames(mydata))], na.rm = T)  
mydata$`Total HBMP` <- rowSums(mydata[,grep('HBMP', colnames(mydata))], na.rm = T)  
mydata$`Total PA` <- rowSums(mydata[,grep('\\bPA\\b', colnames(mydata))], na.rm = T)  
mydata$`Total PC` <- rowSums(mydata[,grep('\\bPC\\b', colnames(mydata))], na.rm = T)  
mydata$`Total PE` <- rowSums(mydata[,grep('\\bPE\\b', colnames(mydata))], na.rm = T) 
mydata$`Total PEtOH` <- rowSums(mydata[,grep('\\bPEtOH\\b', colnames(mydata))], na.rm = T) 
mydata$`Total PG` <- rowSums(mydata[,grep('\\bPG\\b', colnames(mydata))], na.rm = T) 
mydata$`Total PMeOH` <- rowSums(mydata[,grep('\\bPMeOH\\b', colnames(mydata))], na.rm = T) 
mydata$`Total TG` <- rowSums(mydata[,grep('TG', colnames(mydata))], na.rm = T)

# Calculate total quantified lipids by summing all classes
mydata$`Total Lipid` <- rowSums(mydata[,153:165], na.rm = T)
```

## Total Lipid Bar Graphs

```{r}
# Subset total lipid column
mdat <- mydata |>
  select(Condition, `Total Lipid`)

# Make Condition a factor and set order
mdat$Condition <- factor(mdat$Condition, 
                            levels = c("0.28 OsM", "1.02 OsM", "1.02 OsM + 1mM GB")
                            )

# Make data long
mdat2 <- mdat |>
  pivot_longer(-Condition,
               names_to = "Lipid",
               values_to = "value")

# Plot total lipids
p0 <- ggbarplot(mdat2, x = "Condition", y = "value", 
            add = c("mean_sd", "dotplot"),
            color = "Condition",
            fill = "Condition", 
            add.params = list(width = 0.35, 
                              binwidth = .030*max(mdat2$value, na.rm = T)
                              ),
            alpha = 1.0,
            position = position_dodge(0.8),
            size = 0.5
            ) +
  scale_y_continuous(expand = c(0,0), limits = c(0, 1.35*max(mdat2$value)
                                                 )
                     )

# Edit aesthetics
p1 <- ggpar(p0, palette = mypal_new, 
            legend.title = "Condition", 
            title = "Total Lipids",  
            xlab = "Condition", 
            ylab = "pmol lipid/1e8 cells") +
  scale_color_manual(values = c("black", "black", "black")
                     )

# Perform pairwise t-tests
stat.test <- mdat2 %>%
  group_by(Lipid) %>%
  na.omit() %>%
  t_test(value ~ Condition) %>%
  adjust_pvalue(method = "none") %>%
  add_significance("p")
stat.test$p.adj.signif <- stat.test$p.signif

# Generate x and y coordinates to plot significance
stat.test <- stat.test %>%
  na.omit() %>%
  add_xy_position(fun = "max", "Condition",
                  dodge = 0.8,
                  step.increase = 0.075) 

# Overlay results of t-test
p2 <- p1 +
  stat_pvalue_manual(
    stat.test, 
    label = "p.signif",
    tip.length = 0.02, 
    hide.ns = T,
    size = 8
    ) +
  theme_bw(base_size = 14,
           base_family = "sans",
           base_line_size = 1
           ) +
  theme(axis.text = element_text(size = 12),
        axis.line = element_line(linetype = 0),
        legend.position = "bottom"
        )

p2

ggsave(filename="output/total_lipid.pdf", 
       plot = p2, 
       device = "pdf",
       width = 14, height = 12,
       units = "cm",
       dpi = 600)

rm(mdat, mdat2, p0, p1, p2, stat.test)
```

## Lipid Class

Calculate percent contribution of lipid classes to total lipids in the conditions.

```{r}
# Subset class data
mdat <- mydata |>
  select(`Sample Number`, Condition, 
         `Total CL`:`Total Lipid`)

mdat$Condition <- factor(mdat$Condition,
                            levels = c("0.28 OsM", "1.02 OsM", "1.02 OsM + 1mM GB")
                            )

mdat2 <- mdat |>
  pivot_longer(-c(`Sample Number`, Condition),
               names_to = "Lipid",
               values_to = "value")

# Create variable for % contribution of each class to total lipid pool
mdat2 <- mdat2 |>
  group_by(`Sample Number`, Condition) |>
  mutate(norm_val = 100*value/value[Lipid == "Total Lipid"])

# Remove total lipid
mdat2 <- mdat2 |>
  filter(!Lipid == "Total Lipid")

# Create two 'Class' variables for further editing
mdat2$Class <- as.character(mdat2$Lipid)

# Change Class variable to 'Other' for any classes with less than 1% contribution
mdat2$Class <- ifelse(mdat2$norm_val < 1,
                      "Other",
                      mdat2$Class)

# Also change other classes by name to 'Other'
mdat2$Class <- ifelse(mdat2$Class == "Total FFA",
                      "Other",
                      mdat2$Class)

mdat2$Class <- ifelse(mdat2$Class == "Total PMeOH",
                      "Other",
                      mdat2$Class)

mdat2$Class <- ifelse(mdat2$Class == "Total CL",
                      "Other",
                      mdat2$Class)

stat.test <- mdat2 %>%
  group_by(Lipid) %>%
  na.omit() %>%
  t_test(norm_val ~ Condition) %>%
  adjust_pvalue(method = "none") %>%
  add_significance("p")

# Sum all lipid classes in 'Other' 
mdat2 <- mdat2 |>
  group_by(`Sample Number`, Class) |>
  mutate(norm_val_new = sum(norm_val)
         ) |>
  ungroup()

# Subset out the major lipid classes (PA, PE and PG) and Other (CL here)
mdat2 <- mdat2 |>
  filter(Lipid %in% c("Total CL", "Total PA",
                      "Total PG", "Total PE")
         )

# Order to plot classes 
mdat2 <- mdat2 |>
  mutate(Class = factor(Class,
                        levels = c("Other", "Total PA","Total PG",
                                   "Total PE"
                                  )
                        )
         ) 

# Calculate mean and sd of % contribution of each class
mdat2 <- mdat2 |>
  group_by(Condition, Class) |>
  summarise(mean_norm = mean(norm_val_new),
            sd_norm = sd(norm_val_new),
            .groups = 'drop')
  
# Generate coordinates for error bars
error_bars = mdat2 |>
  arrange(Condition, desc(Class)) |>
  # for each group, calculate new value by cumulative sum
  group_by(Condition) |>
  mutate(mean_norm_new = cumsum(mean_norm)) |>
  ungroup()

# plot
ggplot(mdat2, aes(x = Condition, y = mean_norm)) +
  geom_bar(stat = 'identity', aes(fill = Class)) +
  geom_errorbar(data = error_bars,
                aes(x = Condition,
                    ymax = mean_norm_new + sd_norm,
                    ymin = mean_norm_new - sd_norm), 
                width = 0.2) +
  scale_fill_manual(values = mypal_bar[c(6,2,5,3)]) +
  scale_y_continuous(limits = c(0, 110),
                     breaks = c(0, 25, 50, 75, 100)
                     ) +
  ylab("Percent total lipids (%)") +
  ggtitle("Lipid class breakdown") +
  theme_bw(base_size = 14,
           base_family = "sans",
           base_line_size = 1
           ) +
  theme(axis.text = element_text(size = 12),
        axis.line = element_line(linetype = 0),
        legend.position = "right"
        )
# Export plot
ggsave(filename="output/Lipid_class.pdf", 
       plot = last_plot(), 
       device = "pdf",
       width = 12, height = 12,
       units = "cm",
       dpi = 600)

# Export data on all lipid classes and t-tests
write_csv(mdat2, file = "output/STable2_sum.csv")
write_csv(stat.test, file = "output/STable2_pval.csv")

rm(mdat, mdat2, stat.test, error_bars)
```

## Volcano plots

Percent composition

```{r}
mydata_comp <- lipid_data
mydata_comp$`Total Lipid` <- rowSums(mydata_comp[,3:ncol(mydata_comp)], na.rm = T)

mydata_comp[,3:ncol(mydata_comp)] <-
  mydata_comp[,3:ncol(mydata_comp)]/mydata_comp$`Total Lipid`

Z <- mydata_comp |>
  select(!`Total Lipid`)

# Change all 0 values to NA
Z[Z==0] <- NA

Z <- Z |> 
  pivot_longer(-c(`Sample Number`, Condition),
               names_to = "Lipid",
               values_to = "signal")

Z <- Z |>
  filter(Condition %in% c("1.02 OsM + 1mM GB", "0.28 OsM")  # Change to desired groups
         )

# Calculate fold changes; edit summarise function to select correct Conditions
volcano <- Z |> 
  drop_na() |>
  group_by(Lipid) |>      # retain factor
  summarise(FC = mean(signal[Condition == "1.02 OsM + 1mM GB"])/mean(signal[Condition == "0.28 OsM"])
            ) |>
  ungroup()

# Calculate p-values for for each lipid, within each group
stat.test <- Z |>
  group_by(Lipid) |>                # Grouping variables as above
  t_test(signal ~ Condition) |>     # significance test (can also do wilcox_test)
  mutate(log10_p = -log10(p)) |>    # transform p-values for plotting
  ungroup()

# Add stats info to fold change
volcano <- left_join(volcano, stat.test, 
                     by = c("Lipid")
                     )

# Create [factor] variable for lipid change based on p-value and direction of change
volcano$signif <- ifelse(volcano$p < 0.051 & volcano$FC > 1.0, 
                         "Increased", "p>0.051")

volcano$signif <- ifelse(volcano$p < 0.051 & volcano$FC < 1.0, 
                         "Decreased", volcano$signif)

volcano$signif <- factor(volcano$signif,
                         levels = c("p>0.051", "Increased", "Decreased")
                         )

# Create column to label significantly altered lipids
volcano$delabel <- ifelse(volcano$signif != "p>0.051",
                          paste0(volcano$Lipid), 
                          NA)

# Reduce names to represent lipid classes
volcano$delabel <- gsub(" .*","", volcano$delabel)
volcano$delabel <- gsub("\\bFAHFA\\b","FA", volcano$delabel)
volcano$delabel <- factor(volcano$delabel)

# Transform fold change for plotting
volcano$FC <- log2(volcano$FC)

# Create scatterplot with fold change on x-axis, p-value on y-axis
# Shade significantly altered lipids by lipid class
p0 <- volcano |>
  ggplot(aes(x=FC, y = log10_p, 
             col = delabel
             )
         ) +
  geom_point() +
  scale_y_continuous(limits = c(0, 8),
                     expand = c(0.01,0)
                     ) +
  scale_x_continuous(limits = c(-5, 6)
                     ) +
  geom_vline(xintercept = 0,
             linetype = "dashed",
             linewidth = 0.5) +
  geom_hline(yintercept = 1.301,            # dashed line for p=0.05
             linetype = "dashed",
             linewidth = 0.5
             ) +
  annotate("text", label = "p=0.05",
           x = 6, 
           y = 1.0,                         # text label for line signifying p-value = 0.05
           size = 2.5,      
           vjust = -0.25,
           colour = "black") +
  scale_color_manual(values=c(mypal_bar[c(4, 5, 7, 9)],
                              "magenta", "black", 
                              mypal_bar[c(2, 3, 1, 6, 8)]
                              ), 
                           name = "Lipid Class",                 # legend title
                           breaks = c("CL", "DG", "FA",  
                                      "HBMP", "LPC", "LPE",
                                      "PA", "PE", "PG",
                                      "PMeOH", "TG")
                     ) +                                         # desired name in legend
  ggtitle("Effect of high salt and GB") +
  xlab("log2(Fold change [1.02 OsM + 1mM GB/0.28 OsM])") +        # Edit based on groups
  ylab("-log10(p-value)") +
  theme_bw(base_size = 14,
           base_family = "sans",
           base_line_size = 1
           ) +
  theme(axis.text = element_text(size = 12),
        axis.line = element_line(linetype = 0),
        legend.position = "top"
        )
p0

ggsave(filename="output/volcano_salt_GB_effect.pdf", 
       plot = p0, 
       device = "pdf",
       width = 14, height = 16,
       units = "cm",
       dpi = 600)

write_csv(volcano, file = "output/volcano_salt_GB_effect.csv")


rm(list=setdiff(ls(), c("lipid_data", "mydata", "mydata_comp",
                        "mypal_bar", "mypal_new")
                )
   )
```

## Species altered by class dependent on GB

```{r}
volcano <- read_csv(file = "output/volcano_GB_effect_comp.csv")

volcano <- volcano |> 
  filter(!signif == "p>0.051") 

volcano <- volcano |>
  select(signif, delabel)

volcano <- volcano %>%
  mutate(across(where(is.character), as.factor)
         )

volcano <- volcano |>
  add_column(num = 1)

mdat <- volcano |>
  group_by(signif, delabel, .drop = FALSE) |>
  summarise(count=sum(num))


p0 <- ggbarplot(mdat, x = "delabel", y = "count",
            color = "signif",
            fill = "signif", 
            alpha = 1.0,
            position = position_dodge(0.8),
            size = 0.5
            ) +
  scale_y_continuous(expand = c(0,0),
                     limits = c(0, 25)
                     )
p1 <- ggpar(p0, palette = mypal_new[2:3], 
            legend.title = "Condition", 
            title = "Lipid changes due to GB",  
            xlab = "Lipid Class", ylab = "Number of lipid species") +
  scale_color_manual(values = c("black", "black")
                     )
  
p2 <- p1 +
  theme_bw(base_size = 14,
           base_family = "sans",
           base_line_size = 1
           ) +
  theme(axis.text = element_text(size = 12),
        axis.line = element_line(linetype = 0),
        legend.position = "bottom"
        ) +
  coord_flip()
p2

ggsave(filename="output/GB_effect_Counts.pdf", 
       plot = p2, 
       device = "pdf",
       width = 12, height = 14,
       units = "cm",
       dpi = 600)

rm(list=setdiff(ls(), c("lipid_data", "mydata", "mydata_comp",
                        "mypal_bar", "mypal_new")
                )
   )
```

## Venn Diagrams

```{r}
# Load volcano plot results
high_OsM <- read_csv(file = "output/volcano_salt_effect.csv")
high_GB <- read_csv(file = "output/volcano_salt_GB_effect.csv")

# Obtain lipid names of significantly different lipids in each comparison
high_102 <- high_OsM |> 
  filter(signif == "Increased") |>
  pull(Lipid) 

low_102 <- high_OsM |> 
  filter(signif == "Decreased") |>
  pull(Lipid) 
  
high_1mM <- high_GB |> 
  filter(signif == "Increased") |>
  pull(Lipid) 

low_1mM <- high_GB |> 
  filter(signif == "Decreased") |>
  pull(Lipid)
  
# Color scheme for Venn diagram
myCol_fill <- c("#FC4E07B2", "#008B00B2")   # alpha=0.7 of normal colors
myCol_text <- c("#FC4E07", "green4")

# Make venn diagram high and low
v <-  venn.diagram(x = list(high_102, high_1mM),
             category.names = c("1.02 OsM", "1.02 OsM + 1mM GB"), 
             main = "Lipids increased with osmolarity", # plot title
             compression = "lzw",        # image compression
             fontfamily = "Arial",       # text font
             col = myCol_fill, 
             fill = alpha(myCol_fill, 0.7), # fill colors
             cat.col = myCol_text,           # text colors
             cat.fontface = "bold" , cat.cex = 1, # font face and size
             cat.fontfamily = "Arial",            
             filename = NULL, resolution = 600,   # image resolution
             output = T)

CairoPDF(file = "output/volcano_high_venn.pdf")
  grid.draw(v)
dev.off()

# Obtain lipids in each portion of venn diagram
shared_high <- qpcR:::cbind.na(high_102[!high_102 %in% high_1mM], # increased in 1.02 OsM only
                               high_1mM[!high_1mM %in% high_102], # increased in 1mM GB only
                               high_102[high_102 %in% high_1mM])  # increased in both

colnames(shared_high) <- c("102_high", "1mM_high", "both")

shared_low <- qpcR:::cbind.na(low_102[!low_102 %in% low_1mM],
                              low_1mM[!low_1mM %in% low_102],
                              low_102[low_102 %in% low_1mM])
colnames(shared_low) <- c("102_low", "1mM_low", "both")

write_csv(data.frame(shared_high), file = "output/volcano_high_venn.csv")

rm(list=setdiff(ls(), c("lipid_data", "mydata", "mydata_comp",
                        "mypal_bar", "mypal_new")
                )
   )
```

## Plot shared species % composition

```{r}
Z <- mydata_comp |>
  select(!`Total Lipid`)

shared_high <- read_csv(file = "output/volcano_high_venn.csv")
shared_low <- read_csv(file = "output/volcano_low_venn.csv")

shared_high <- na.omit(shared_high$both)
shared_low <- na.omit(shared_low$both)

Z1 <- Z |>
  select(`Sample Number`, Condition,
         all_of(shared_high)
         )

Z2 <- Z |>
  select(`Sample Number`, Condition,
         all_of(shared_low)
         )

# Change Z1 for high, Z2 for low
mdat <- Z1 |>
  pivot_longer(-c(`Sample Number`, Condition),
               names_to = "Lipid",
               values_to = "signal")

mdat$Condition <- factor(mdat$Condition,
                         levels = c("0.28 OsM", "1.02 OsM", "1.02 OsM + 1mM GB")
                         )

p0 <- ggbarplot(mdat, x = "Lipid", y = "signal", 
            add = c("mean_sd", "dotplot"),
            color = "Condition",
            fill = "Condition", 
            add.params = list(width = 0.35, 
                              binwidth = .025*max(mdat$signal, na.rm = T)
                              ),
            alpha = 1.0,
            position = position_dodge(0.8),
            size = 0.5
            ) +
  scale_y_continuous(expand = c(0,0),
                     limits = c(0, 1.35*max(mdat$signal)
                                                 )
                     )

p1 <- ggpar(p0, palette = mypal_new, 
            legend.title = "Condition", 
            title = "Species increased",  
            xlab = "Lipid species", ylab = "% total lipids") +
  scale_color_manual(values = c("black", "black", "black")
                     )

stat.test <- mdat %>%
  group_by(Lipid) %>%
  na.omit() %>%
  t_test(signal ~ Condition) %>%
  adjust_pvalue(method = "none") %>%
  add_significance("p")
  
stat.test$p.adj.signif <- stat.test$p.signif
stat.test <- stat.test %>%
  na.omit() %>%
  add_xy_position(fun = "max", "Lipid",
                  dodge = 0.8,
                  step.increase = 0.075) 

p2 <- p1 +
  stat_pvalue_manual(
    stat.test, 
    label = "p.signif",
    tip.length = 0.02, 
    hide.ns = T
    ) +
  theme_bw(base_size = 14,
           base_family = "sans",
           base_line_size = 1
           ) +
  theme(axis.text = element_text(size = 12),
        axis.line = element_line(linetype = 0),
        legend.position = "bottom"
        ) +
  scale_x_discrete(guide = guide_axis(angle = 45)) 
p2

ggsave(filename="output/volcano_increased_common.pdf", 
       plot = p2, 
       device = "pdf",
       width = 14, height = 12,
       units = "cm",
       dpi = 600)

rm(list=setdiff(ls(), c("lipid_data", "mydata", "mydata_comp",
                        "mypal_bar", "mypal_new")
                )
   )
```

## Plot lipid species within class

PE lipid species calculations. Edit for other lipid classes as needed.

```{r}
# Subset all PE lipids
mdat <- mydata |>
  select(`Sample Number`, Condition,
         grep("\\bPE\\b", names(lipid_data)
              ), `Total PE`
         )

mdat <- mdat |>
  pivot_longer(-c(`Sample Number`, Condition),
               names_to = "Lipid",
               values_to = "signal")

mdat$Condition <- factor(mdat$Condition,
                         levels = c("0.28 OsM", "1.02 OsM", "1.02 OsM + 1mM GB")
                         )

# Calculate % contribution of each species to total PE
mdat <- mdat |>
  group_by(`Sample Number`, Condition) |>
  mutate(norm_signal = 100*signal/signal[Lipid == "Total PE"]) |>
  ungroup()

mdat <- mdat |>
  filter(!Lipid == "Total PE") |>
  drop_na()

# Remove 'PE' in front of all species
mdat$Lipid <- gsub("PE ", "", mdat$Lipid)

# Calculate mean PE signal for each species
mdat_sum <- mdat |>
  drop_na() |>
  group_by(Condition, Lipid) |>
  summarise(mean_PE = mean(norm_signal))

# Calculate median lipid species signal of the calculated means for each group
mdat_sum <- mdat_sum |>
  drop_na() |>
  group_by(Lipid) |>
  summarise(mean_PE_overall = median(mean_PE))

# Identify PE species contributing less than 1% to total PE pool from median calculation
low_PE <- mdat_sum |>
  filter(!mean_PE_overall < 1) |>
  pull(Lipid)

# Filter out low PE species
mdat <- mdat |>
  filter(Lipid %in% low_PE)

# Plot species
p0 <- ggbarplot(mdat, x = "Lipid", y = "norm_signal", 
            add = c("mean_sd", "dotplot"),
            color = "Condition",
            fill = "Condition", 
            add.params = list(width = 0.35, 
                              binwidth = .025*max(mdat$norm_signal, na.rm = T)
                              ),
            alpha = 1.0,
            position = position_dodge(0.8),
            size = 0.5
            ) +
  scale_y_continuous(expand = c(0,0),
                     limits = c(0, 1.35*max(mdat$norm_signal)
                                                 )
                     )

p1 <- ggpar(p0, palette = mypal_new, 
            legend.title = "Condition", 
            title = "Phosphatidylethanolamine species contribution",  
            xlab = "Lipid species", ylab = "% total PE signal") +
  scale_color_manual(values = c("black", "black", "black")
                     )

stat.test <- mdat %>%
  group_by(Lipid) %>%
  na.omit() %>%
  t_test(norm_signal ~ Condition) %>%
  adjust_pvalue(method = "none") %>%
  add_significance("p")
  
stat.test$p.adj.signif <- stat.test$p.signif
stat.test <- stat.test %>%
  na.omit() %>%
  add_xy_position(fun = "max", "Lipid",
                  dodge = 0.8,
                  step.increase = 0.075) 

p2 <- p1 +
  stat_pvalue_manual(
    stat.test, 
    label = "p.signif",
    tip.length = 0.02, 
    hide.ns = T
    ) +
  theme_bw(base_size = 14,
           base_family = "sans",
           base_line_size = 1
           ) +
  theme(axis.text = element_text(size = 12),
        axis.line = element_line(linetype = 0),
        legend.position = "bottom"
        ) +
  scale_x_discrete(guide = guide_axis(angle = 45)) 
p2

ggsave(filename="output/PE_breakdown.pdf", 
       plot = p2, 
       device = "pdf",
       width = 14, height = 12,
       units = "cm",
       dpi = 600)

rm(mdat, mdat_sum, p0, p1, p2, stat.test)
```

## Acyl Chain Analysis

Signal of various acyl chains to total acyl signal for a given lipid class. Example provided for PG lipids.

```{r}
# Edit below for all acyl chains of interest
mdat <- lipid_data |>
  select(`Sample Number`, Condition,
         grep("12:0|14:0|14:1|15:0|15:1|16:0|16:1|17:0|17:1|18:0|18:1|18:2|19:0|19:1", 
                         names(lipid_data), fixed = F)
         )

# Filter out rows with mostly NA values
mdat <- mdat[!rowSums(is.na(mdat)) > 2, ]

# Replace NA with 0
mdat[, 3:ncol(mdat)][is.na(mdat[, 3:ncol(mdat)])]<- 0

# Subset out target lipid class. Here, it is PG
mdat1 <- mdat |>
  select(`Sample Number`, Condition,
         grep("\\bPG\\b", names(mdat)
              )
         )

mdat2 <- mdat1 |>
  pivot_longer(-c(`Sample Number`, Condition),
               names_to = "variable")

# Edit lipid names
mdat2$variable1 <- gsub(".*\\ ", "", mdat2$variable)   # Removes anything from start until the space (after \\)

# Split names to separate acyl chains into separate columns
mdat2_FA <- str_split_fixed(mdat2$variable1, "_", 4)
mdat3 <- cbind(mdat2, mdat2_FA)
mdat3$`3` <-  ifelse(mdat3$`3` == "2", "", mdat3$`3`)

mdat3$variable <- gsub(" .*", "", mdat3$variable)

# Expand into separate data frames
mdat3_FA1 <- mdat3[,1:6]
mdat3_FA2 <- mdat3[,c(1:5,7)]
mdat3_FA3 <- mdat3[,c(1:5,8)]
mdat3_FA4 <- mdat3[,c(1:5,9)]

# Rename column with FA information
names(mdat3_FA1)[6] <- "FA"
names(mdat3_FA2)[6] <- "FA"
names(mdat3_FA3)[6] <- "FA"
names(mdat3_FA4)[6] <- "FA"

# Prepare for re-merging
mdat3_FA1$FA <- gsub("/0:0", "", mdat3_FA1$FA)

# Create dataset with FA data combined
mdat4 <- rbind(mdat3_FA1, mdat3_FA2, mdat3_FA3, mdat3_FA4)

# Sum up acyl chain values
mdat5 <- aggregate(mdat4$value, by=list(id = mdat4$`Sample Number`,
                                        Condition = mdat4$Condition,
                                        FA=mdat4$FA),
                   FUN=sum)

# Remove empty rows
mdat5 <- mdat5[!mdat5$FA == "",]

# Calculate the % contribution of acyl chains relative to total amount
names(mdat5)[4] <- "value"
mdat6 <- mdat5 |> 
  group_by(id) |>
  mutate(norm_signal = 100*value/sum(value)
         )

# Edit chains to plot as needed
chains_rm <- c("12:0", "14:1")  # Because they were extremely low abundance
mdat6 <- mdat6[!mdat6$FA %in% chains_rm,]

# Low abundance chains
chains_low <- c("14:0", "15:0", "17:0", "18:0", "18:2", "19:1") # 18:2 for PG not PE

# Add a '!' after the first bracket to exclude low abundance chains
mdat6 <- mdat6[mdat6$FA %in% chains_low,] 

# Plot low abundance chains
p0 <- ggbarplot(mdat6, x = "FA", y = "norm_signal", 
            add = c("mean_sd", "dotplot"), color = "Condition", fill = "Condition", 
            add.params = list(width = 0.35, 
                              binwidth = .025*max(mdat6$norm_signal, na.rm = T)
                              ),
            alpha = 0.9, 
            position = position_dodge(0.8), 
            size = 0.5
            ) + 
            scale_y_continuous(expand = c(0,0), limits = c(0, 1.35*max(mdat6$norm_signal)
                                                           )
                               ) +
            theme_bw(base_size = 16, base_family = "Arial") + 
            theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=0.5)
                  )

p1 <- ggpar(p0, palette = mypal_new,
            legend.title = "Condition", 
              title = "PG acyl chain signal",  
              xlab = "Fatty acyl", ylab = "% total PG acyl signal")


stat.test <- mdat6 %>%
group_by(FA) %>%
na.omit() %>%
t_test(norm_signal ~ Condition) %>%
adjust_pvalue(method = "none") %>%
add_significance("p")
  
stat.test$p.adj.signif <- stat.test$p.signif
stat.test <- stat.test %>%
                  na.omit() %>%
                  add_xy_position(fun = "mean_sd", "FA", 
                                  dodge = 0.8, step.increase = 0.075) 

p2 <- p1 + stat_pvalue_manual(
      stat.test,
      label = "p.signif",
      tip.length = 0.02,
      hide.ns = T) +
  scale_color_manual(values = c("black", "black", "black")
                     ) +
  theme_bw(base_size = 14,
           base_family = "sans",
           base_line_size = 1
           ) +
  theme(axis.text = element_text(size = 12),
        axis.line = element_line(linetype = 0),
        legend.position = "bottom"
        )
p2


ggsave(filename="output/PG_acyl_low.pdf", 
       plot = p2, 
       device = "pdf",
       width = 14, height = 12,
       units = "cm",
       dpi = 600)

rm(list=setdiff(ls(), c("lipid_data", "mydata")
                )
   )
```

## Session Info

```{r}
sessionInfo()
```

R version 4.3.0 (2023-04-21) Platform: x86_64-apple-darwin20 (64-bit) Running under: macOS Monterey 12.7.1

Matrix products: default BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib; LAPACK version 3.11.0

locale: \[1\] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: America/New_York tzcode source: internal

attached base packages: \[1\] stats graphics grDevices utils datasets methods base

other attached packages: \[1\] factoextra_1.0.7 ggbreak_0.1.2 rstatix_0.7.2 ggpubr_0.6.0 scales_1.2.1\
\[6\] ggsci_3.0.0 Cairo_1.6-1 lubridate_1.9.3 forcats_1.0.0 stringr_1.5.1\
\[11\] dplyr_1.1.4 purrr_1.0.2 readr_2.1.4 tidyr_1.3.0 tibble_3.2.1\
\[16\] ggplot2_3.4.4 tidyverse_2.0.0

loaded via a namespace (and not attached): \[1\] yulab.utils_0.1.0 utf8_1.2.4 generics_0.1.3 ggplotify_0.1.2\
\[5\] stringi_1.8.2 digest_0.6.33 hms_1.1.3 magrittr_2.0.3\
\[9\] grid_4.3.0 timechange_0.2.0 fastmap_1.1.1 ggrepel_0.9.4\
\[13\] backports_1.4.1 fansi_1.0.5 aplot_0.2.2 abind_1.4-5\
\[17\] cli_3.6.1 crayon_1.5.2 rlang_1.1.2 bit64_4.0.5\
\[21\] munsell_0.5.0 cachem_1.0.8 withr_2.5.2 parallel_4.3.0\
\[25\] tools_4.3.0 tzdb_0.4.0 memoise_2.0.1 ggsignif_0.6.4\
\[29\] colorspace_2.1-0 broom_1.0.5 vctrs_0.6.4 R6_2.5.1\
\[33\] gridGraphics_0.5-1 lifecycle_1.0.4 bit_4.0.5 fs_1.6.3\
\[37\] car_3.1-2 ggfun_0.1.3 vroom_1.6.4 pkgconfig_2.0.3\
\[41\] pillar_1.9.0 gtable_0.3.4 Rcpp_1.0.11 glue_1.6.2\
\[45\] xfun_0.41 tidyselect_1.2.0 rstudioapi_0.15.0 knitr_1.45\
\[49\] patchwork_1.1.3 carData_3.0-5 compiler_4.3.0
